/* Trying to express a calvin script in EBNF format */

/*****************************************************

A calvinscript contains either a plain script, or a 
component definition followed by a plain script (which
is intended for quick testing of a component). 

Example of script:
 
  src: FileReader(N=10)
  sink: SinkActor(file="bar.txt")
  src.out > sink.in

Example of component + script: 

  component Foo(case) in  -> out {

    a:Prepend(prefix = "Hello")
    b:ChangeCase(case = case)
  
    in > a.in
    a.out > b.in
    b.out > out 
  }

  src: FileReader(text = "World")
  filter: Foo(case = 'upper') 
  sink: SinkActor(dst = "stdout")

  src.out > filter.in
  filter.out > sink.in
  
(this would produce "HELLO WORLD" on stdout when run)

*****************************************************/

/* [] represents optional part */
/* {} represents zero or more */
/* |  represents alternation */

/* Optional component definition followed by a graph (aka program) */
script ::= {compdef} [program] EOF.

compdef ::= declaration "{" program "}"
declaration ::= "component" component "(" {argname} ")" {inport} "->" {outport}

/* A program has at least one statement */
program ::= statement {statement}.
statement ::= assignment | link

assignment ::= variable ":" component "(" {named_argument} ")".

/* A link can be a 'port' (local to component definition) 
   or a fully qualified address 'actor.port'              
*/   
link ::= port_def ">" port_def
port_def :: port | qualified_port
qualified_port ::= variable "." port

named_argument ::= argname "=" argument
argument ::= stringLiteral | numberLiteral | variable


/* TODO: Parametrized components:

component Parallel(N, ComputeActor, args...) in -> out {

  mux: MuxActor(N)
  filter(N): ComputeActor(args...)
  demux: DemuxActor(N)
  
  in > mux.in
  mux.out$ > filter$.in
  filter$.out > demux.in$
  demux.out > out

}

*/
