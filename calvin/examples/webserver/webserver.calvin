define HOST="127.0.0.1"
define PORT=8089
define OK=200
define BAD_REQ=400
define NOT_FOUND=404


component DaisyAdapter(status_OK) in, status, work_result, work_status -> work_data, out, status {
  """
  Allow daisy-chaining of data/status along a processing flow.

  Conceptually, the flow looks like the following picture:

                +-----------+          +-----------+          +-----------+
                |   actor   |          |   actor   |          |   actor   |
                |           |          |           |          |           |
                |     r  s  |          |     r  s  |          |     r  s  |
                |     e  t  |          |     e  t  |          |     e  t  |
                |  d  s  a  |          |  d  s  a  |          |  d  s  a  |
                |  a  u  t  |          |  a  u  t  |          |  a  u  t  |
                |  t  l  u  |          |  t  l  u  |          |  t  l  u  |
                |  a  t  s  |          |  a  t  s  |          |  a  t  s  |
                +-----------+          +-----------+          +-----------+
                   ^  |  |                ^  |  |                ^  |  |
                   |  v  v                |  v  v                |  v  v
         data   +--+--+--+--+   data   +--+--+--+--+   data   +--+--+--+--+   data
  ... --------->|           |--------->|           |--------->|           |---------> ...
        status  |   daisy   |  status  |   daisy   |  status  |   daisy   |  status
  ... --------->|           |--------->|           |--------->|           |---------> ...
                +-----------+          +-----------+          +-----------+

  Data propagates down the chain and is processed by the actors, in order, as long as each actor
  reports its status as OK (according to the argument provided to DaisyAdapter). If an actor reports
  its status as not OK, the error status and the corresponding data is simply propagated down the
  flow, without further processing.
  """

  const_OK : std.Constantify(constant=status_OK)
  cmp : std.Compare(op="=")
  route_input : std.Select()
  route_status : std.Select()
  join_status : std.Join()
  join_output : std.Join()
  term : std.Terminator()


  # Is incoming status 200 (OK)?
  .status > const_OK.in
  const_OK.out > cmp.a
  .status > cmp.b
  # Route input and status based on the outcome
  cmp.result > route_status.select
  cmp.result > route_input.select
  .status > route_status.data
  .in > route_input.data
  # Propagate any incoming status != 200 (OK) to status out
  route_status.case_false > join_status.token_1
  # Also bypass any computation and pass input directly to output
  route_input.case_false > join_output.token_1
  # If incoming status is 200 (OK) drop it since we will soon have a new status
  route_status.case_true > term.void
  # Merge statii
  join_status.token > .status
  join_output.token > .out
  #
  # Connect to work actor here
  #
  route_input.case_true > .work_data
  .work_result > join_output.token_2
  .work_status > join_status.token_2
}


component HTTPGETRequestCheck() request -> path, status {
  """
  Check if request is valid HTTP GET request.

  Input:
	  request: an HTTP request, possibly malformed
  Outputs:
    path: the requested resource path, or the full request on error
    status: the request status, either OK (200) or Bad Request (400)
  """
  match_request_method : text.RegexMatch(regex="(GET) \S+ HTTP/\d\.\d")
  match_request_path : text.RegexMatch(regex="[A-Z]+ (\S+) HTTP/\d\.\d")
  const_BAD_REQUEST : std.Constantify(constant=BAD_REQ)
  const_OK : std.Constantify(constant=OK)
  join_output : std.Join()
  join_status : std.Join()

  .request > match_request_method.text
  .request > match_request_path.text
  match_request_method.match > const_OK.in
  match_request_path.match > join_output.token_1
  match_request_path.no_match > join_output.token_2
  join_output.token > .path
  // Successful path
  const_OK.out > join_status.token_1
  // Error path
  match_request_method.no_match > const_BAD_REQUEST.in
  const_BAD_REQUEST.out > join_status.token_2
  // Status
  join_status.token > .status
}


component HTTPResourceLocator(base_path) rel_path -> abs_path, status {
  """
  Locate a resource by appending rel_path to base_path.
  If the resulting path is outside of base_path,
  or if the resource doesn't exist an error is genrated.

  Input:
    rel_path : Path for resource relative to base_path
  Outputs:
    abs_path : Absolute path to resource.
    status : An integer status code (200) 'OK' or (404) 'Not found'
  """

  const_base : std.Constantify(constant=base_path)
  status : std.Deselect()
  abs_path : path.Append(inside_base=true)

  .rel_path > const_base.in
  const_base.out > abs_path.base
  .rel_path > abs_path.append
  # Partially successful path
  abs_path.path > .abs_path
  # Update status based on error
  # false => OK
  # true => FILE NOT FOUND
  abs_path.error > status.select
  OK > status.case_false
  NOT_FOUND > status.case_true
  status.data > .status
}


component HTTPFileReader() filename -> resource, status {
  """
  Concatenate lines into a chunk of text (the requested resource)

  Input:
    filename : the resource to read
  Outputs:
    resource : contents of resource file
    status : OK (200) or File not found (404)
  """
  read_html : io.FileReader()
  concat : text.LineJoin()
  exception_handler : exception.ExceptionHandler()
  is_eos : exception.IsEOS()
  status_mapper : std.Deselect()


  .filename > read_html.filename
  read_html.out > exception_handler.token
  exception_handler.token > concat.line
  concat.text > .resource
  exception_handler.status > is_eos.token
  is_eos.status > status_mapper.select
  OK > status_mapper.case_true
  NOT_FOUND > status_mapper.case_false
  status_mapper.data > .status
}

tcp_server : net.TCPServer(delimiter="\r\n\r\n")
daisy_GET : DaisyAdapter(status_OK=OK)
daisy_path : DaisyAdapter(status_OK=OK)
daisy_resource : DaisyAdapter(status_OK=OK)
check_GET : HTTPGETRequestCheck()
resource_path : HTTPResourceLocator(base_path="html")
resource_reader : HTTPFileReader()
resp: http.HTTPResponseGenerator()
const_OK : std.Constantify(constant=OK)

HOST > tcp_server.host
PORT > tcp_server.port
# This line is a surprising consequence of the dataflow paradigm
tcp_server.handle > tcp_server.handle
# Request
tcp_server.token > daisy_GET.in
# Bootstrap status (OK)
tcp_server.token > const_OK.in
const_OK.out > daisy_GET.status
daisy_GET.work_data > check_GET.request
check_GET.path > daisy_GET.work_result
check_GET.status > daisy_GET.work_status

daisy_GET.status > daisy_path.status
daisy_GET.out > daisy_path.in

daisy_path.work_data > resource_path.rel_path
resource_path.abs_path > daisy_path.work_result
resource_path.status > daisy_path.work_status

daisy_path.status > daisy_resource.status
daisy_path.out > daisy_resource.in
daisy_resource.work_data > resource_reader.filename
resource_reader.resource > daisy_resource.work_result
resource_reader.status > daisy_resource.work_status

daisy_resource.status > resp.status
daisy_resource.out > resp.body
resp.out > tcp_server.token

# Logging
# Tip: To help with debugging, attach a StandardOut actor
#      to any output port to log the data flow, e.g.
# snk: io.StandardOut()
# tcp_server.token > snk.token

